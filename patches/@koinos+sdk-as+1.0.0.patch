diff --git a/node_modules/@koinos/sdk-as/assembly/systemCalls.ts b/node_modules/@koinos/sdk-as/assembly/systemCalls.ts
index 5d14d99..5eeb91a 100644
--- a/node_modules/@koinos/sdk-as/assembly/systemCalls.ts
+++ b/node_modules/@koinos/sdk-as/assembly/systemCalls.ts
@@ -1003,12 +1003,13 @@ export namespace System {
   }
 
   export class ProtoDatabaseObject<TMessage> {
-    value: TMessage;
+    value: TMessage | null;
     key: Uint8Array | null;
 
     constructor(obj: system_calls.database_object, decoder: (reader: Reader, length: i32) => TMessage) {
       this.key = obj.key;
-      this.value = Protobuf.decode<TMessage>(obj.value!, decoder);
+      this.value = null;
+      if (obj.value) this.value = Protobuf.decode<TMessage>(obj.value!, decoder);
     }
   }
 
diff --git a/node_modules/@koinos/sdk-as/assembly/util/storage.ts b/node_modules/@koinos/sdk-as/assembly/util/storage.ts
index 0a259c4..b3b0d77 100644
--- a/node_modules/@koinos/sdk-as/assembly/util/storage.ts
+++ b/node_modules/@koinos/sdk-as/assembly/util/storage.ts
@@ -157,7 +157,7 @@ export namespace Storage {
       do {
         // @ts-ignore key is always initialized when reaching this code
         const obj = direction == Direction.Ascending ? System.getNextObject<Uint8Array, TValue>(this.space, key, this.valueDecoder) : System.getPrevObject<Uint8Array, TValue>(this.space, key, this.valueDecoder);
-        if (obj) {
+        if (obj && obj.key) {
           key = obj.key!;
           if (offsetKey instanceof Uint8Array) {
             // @ts-ignore key here is a Uint8Array
@@ -168,7 +168,7 @@ export namespace Storage {
           }
         }
 
-        done = obj == null || result.length >= limit;
+        done = obj == null || obj.key == null || result.length >= limit;
       } while (!done);
 
       return result;
diff --git a/node_modules/@koinos/sdk-as/assembly/util/token.ts b/node_modules/@koinos/sdk-as/assembly/util/token.ts
index ae4d486..1f21980 100644
--- a/node_modules/@koinos/sdk-as/assembly/util/token.ts
+++ b/node_modules/@koinos/sdk-as/assembly/util/token.ts
@@ -97,6 +97,7 @@ export class Token {
 
     const callRes = System.call(this._contractId, entries.total_supply_entry, Protobuf.encode(args, token.total_supply_arguments.encode));
     System.require(callRes.code == 0, "failed to retrieve token supply");
+    if(!callRes.res.object) return 0;
     const res = Protobuf.decode<token.total_supply_result>(callRes.res.object as Uint8Array, token.total_supply_result.decode);
 
     return res.value;
@@ -118,6 +119,7 @@ export class Token {
 
     const callRes = System.call(this._contractId, entries.balance_of_entry, Protobuf.encode(args, token.balance_of_arguments.encode));
     System.require(callRes.code == 0, "failed to retrieve token balance");
+    if(!callRes.res.object) return 0;
     const res = Protobuf.decode<token.balance_of_result>(callRes.res.object as Uint8Array, token.balance_of_result.decode);
 
     return res.value;
